/home/notgard/chps1002/genetic_docking/part2/genetic_algorithm.f90: 222 - 263
--------------------------------------------------------------------------------

222: subroutine evolve_population(pop, pop_size, fitness, crossover_rate, mutation_rate)
[...]
231:    type(molecule), allocatable :: new_pop(:)
232:    integer :: n, i, p1, p2
233:    real :: r
234: 
235:    call random_number(r)
236: 
237:    n = size(fitness)
238:    allocate(new_pop(pop_size))
239: 
240:    do i = 1, n, 2
241:       call random_number(r)
242:       call select_parents(fitness, pop_size, p1, p2)
243:       !print *, "Number of atoms: ", pop(p1)%nb_atoms
244:       !print *, "Number of atoms: ", pop(p2)%nb_atoms
245:       if (r < crossover_rate) then
246:          call crossover(pop(p1), pop(p2), new_pop(i), new_pop(i+1))
247:       else
248:          new_pop(i) = pop(p1)
249:          new_pop(i)%nb_atoms = pop(p1)%nb_atoms
250:          new_pop(i+1) = pop(p2)
251:          new_pop(i+1)%nb_atoms = pop(p2)%nb_atoms
252:       end if
253:    end do
254: 
255:    do i = 1, n
256:       call random_number(r)
257:       if (r < mutation_rate) then
258:          call mutate(new_pop(i))
259:       end if
260:    end do
261: 
262:    pop = new_pop
263: end subroutine evolve_population
