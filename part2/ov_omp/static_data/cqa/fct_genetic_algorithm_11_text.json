{
  "_cqa_text_report":
    {
      "_objects":
        {
          "image_col_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/col_maj.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_8x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/8x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "list_path_1_cvt_1":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/home/notgard/chps1002/genetic_docking/part2/genetic_algorithm.f90:311"
                ],
              "header": ""
            },
          "image_2x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_vec_align":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/vec_align.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "list_path_1_complex_1":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/home/notgard/chps1002/genetic_docking/part2/genetic_algorithm.f90:311"
                ],
              "header": ""
            },
          "list_path_1_call_1":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/home/notgard/chps1002/genetic_docking/part2/genetic_algorithm.f90:299",
                "/home/notgard/chps1002/genetic_docking/part2/genetic_algorithm.f90:299",
                "/home/notgard/chps1002/genetic_docking/part2/genetic_algorithm.f90:299",
                "/home/notgard/chps1002/genetic_docking/part2/genetic_algorithm.f90:309"
                ],
              "header": ""
            },
          "image_2x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_row_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/row_maj.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "list_path_1_complex_2":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/home/notgard/chps1002/genetic_docking/part2/genetic_algorithm.f90:311"
                ],
              "header": ""
            },
          "list_path_1_cvt_2":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/home/notgard/chps1002/genetic_docking/part2/genetic_algorithm.f90:311"
                ],
              "header": ""
            },
          "image_1x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_256.svg",
              "size":
                {
                  "x": 500
                }
            }
        },
      "AVG":
        {
          "hint":
            [
              {
                "details": "Calling (and then returning from) a function prevents many compiler optimizations (like vectorization), breaks control flow (which reduces pipeline performance) and executes extra instructions to save/restore the registers used inside it, which is very expensive (dozens of cycles). Consider to inline small functions.\n - unknown: 4 occurrences<<list_path_1_call_1>>\n",
                "title": "CALL instructions",
                "txt": "Detected function call instructions.\n"
              },
              {
                "workaround": "Recompile with march=znver2.\nCQA target is AMD_fam17h_mod60h (3rd generation Ryzen 3/5/7/9 processors based on the Zen 2 microarchitecture) but specialization flags are -march=x86-64",
                "details": "These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.\n - CVTSI2SS: 1 occurrences<<list_path_1_complex_1>>\n - CVTTSS2SI: 1 occurrences<<list_path_1_complex_2>>\n",
                "title": "Complex instructions",
                "txt": "Detected COMPLEX INSTRUCTIONS.\n"
              },
              {
                "workaround": "Avoid mixing data with different types. In particular, check if the type of constants is the same as array elements.",
                "details": " - CVTSI2SS (INT32/64 to FP32, scalar): 1 occurrences<<list_path_1_cvt_1>>\n - CVTTSS2SI (FP32 to INT32/64, scalar): 1 occurrences<<list_path_1_cvt_2>>\n",
                "title": "Conversion instructions",
                "txt": "Detected expensive conversion instructions."
              },
              {
                "title": "Type of elements and instruction set",
                "txt": "1 SSE or AVX instructions are processing arithmetic or math operations on single precision FP elements in scalar mode (one at a time).\n"
              },
              {
                "title": "Matching between your function (in the source code) and the binary function",
                "txt": "The binary function is composed of 1 FP arithmetical operations:\n - 1: multiply\nThe binary function is loading 404 bytes (101 single precision FP elements).\nThe binary function is storing 364 bytes (91 single precision FP elements)."
              },
              {
                "title": "Arithmetic intensity",
                "txt": "Arithmetic intensity is 0.00 FP operations per loaded or stored byte."
              }
            ],
          "expert":
            [
              {
                "title": "General properties",
                "txt": "nb instructions    : 135\nnb uops            : 153\nloop length        : 607\nused x86 registers : 11\nused mmx registers : 0\nused xmm registers : 2\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 25\n"
              },
              {
                "title": "Front-end",
                "txt": "MACRO FUSION NOT POSSIBLE\nFIT IN UOP CACHE\nmicro-operation queue: 25.50 cycles\nfront end            : 25.50 cycles\n"
              },
              {
                "title": "Back-end",
                "txt": "       | ALU0/BRU0 | ALU1 | ALU2 | ALU3/BRU1 | AGU0  | AGU1  | AGU2  | FP0  | FP1  | FP2  | FP3\n------------------------------------------------------------------------------------------------\nuops   | 7.50      | 7.50 | 7.50 | 7.50      | 34.83 | 34.50 | 34.67 | 0.50 | 0.50 | 1.00 | 2.00\ncycles | 7.50      | 7.50 | 7.50 | 7.50      | 34.83 | 34.50 | 34.67 | 0.50 | 0.50 | 1.00 | 2.00\n\nExecution ports to units layout:\n - ALU0/BRU0: ALU, BRU\n - ALU1: ALU\n - ALU2: ALU\n - ALU3/BRU1: ALU, BRU\n - AGU0 (256 bits): store address, load\n - AGU1 (256 bits): store address, load\n - AGU2: store address\n - FP0 (256 bits): VPU\n - FP1 (256 bits): VPU\n - FP2 (256 bits): VPU, FP store data\n - FP3 (256 bits): VPU, DIV/SQRT\n\nCycles executing div or sqrt instructions: NA\nCycles loading/storing data              : 47.00\n"
              },
              {
                "title": "Cycles summary",
                "txt": "Front-end : 25.50\nDispatch  : 34.83\nOverall L1: 47.00\n"
              },
              {
                "title": "Vectorization ratios",
                "txt": "INT\nall    : 1%\nload   : 0%\nstore  : 0%\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 14%\nFP\nall     : 0%\nload    : 0%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : 0%\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 0%\nINT+FP\nall     : 1%\nload    : 0%\nstore   : 0%\nmul     : 0%\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 12%\n"
              },
              {
                "title": "Vector efficiency ratios",
                "txt": "INT\nall    : 23%\nload   : 23%\nstore  : 23%\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 26%\nFP\nall     : 12%\nload    : 12%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : 12%\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 12%\nINT+FP\nall     : 23%\nload    : 23%\nstore   : 23%\nmul     : 12%\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 25%\n"
              },
              {
                "title": "Cycles and memory resources usage",
                "txt": "Assuming all data fit into the L1 cache, each call to the function takes 47.00 cycles. At this rate:\n - 13% of peak load performance is reached (8.60 out of 64.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 24% of peak store performance is reached (7.74 out of 32.00 bytes stored per cycle (GB/s @ 1GHz))\n"
              },
              {
                "title": "Front-end bottlenecks",
                "txt": "Found no such bottlenecks."
              },
              {
                "title": "ASM code",
                "txt": "In the binary file, the address of the function is: 43c1\n\nInstruction                   | Nb FU | ALU0/BRU0 | ALU1 | ALU2 | ALU3/BRU1 | AGU0 | AGU1 | AGU2 | FP0  | FP1  | FP2 | FP3 | Latency | Recip. throughput | Vectorization\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nPUSH %RBP                     | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 1                 | N/A\nMOV %RSP,%RBP                 | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | N/A\nPUSH %R14                     | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 1                 | N/A\nPUSH %R13                     | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 1                 | N/A\nPUSH %R12                     | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 1                 | N/A\nPUSH %RBX                     | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 1                 | N/A\nSUB $0xd0,%RSP                | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | N/A\nCALLQ 0x11c17(%RIP)           | 2     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 1       | 1                 | N/A\nMOV %RDI,-0xd8(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV %RSI,-0xe0(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV %RDX,-0xe8(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV %RCX,-0xf0(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOVQ $0,-0xd0(%RBP)           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOV -0xe8(%RBP),%RAX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | N/A\nMOV (%RAX),%RCX               | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV 0x8(%RAX),%RBX            | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV %RCX,-0x80(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV %RBX,-0x78(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV 0x10(%RAX),%RCX           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV 0x18(%RAX),%RBX           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV %RCX,-0x70(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV %RBX,-0x68(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV 0x20(%RAX),%RCX           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV 0x28(%RAX),%RBX           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV %RCX,-0x60(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV %RBX,-0x58(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV 0x30(%RAX),%RCX           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV 0x38(%RAX),%RBX           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV %RCX,-0x50(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV %RBX,-0x48(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV 0x40(%RAX),%RAX           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | N/A\nMOV %RAX,-0x40(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV -0xe8(%RBP),%RAX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | N/A\nMOV -0xd0(%RBP),%RCX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV -0xc8(%RBP),%RBX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV %RCX,(%RAX)               | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV %RBX,0x8(%RAX)            | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV -0xc0(%RBP),%RCX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV -0xb8(%RBP),%RBX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV %RCX,0x10(%RAX)           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV %RBX,0x18(%RAX)           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV -0xb0(%RBP),%RCX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV -0xa8(%RBP),%RBX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV %RCX,0x20(%RAX)           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV %RBX,0x28(%RAX)           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV -0xa0(%RBP),%RCX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV -0x98(%RBP),%RBX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV %RCX,0x30(%RAX)           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV %RBX,0x38(%RAX)           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV -0x90(%RBP),%RDX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV %RDX,0x40(%RAX)           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV -0x80(%RBP),%RAX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | N/A\nTEST %RAX,%RAX                | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | scal (25.0%)\nJE 44d4 <crossover_+0x113>    | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nMOV -0x80(%RBP),%RAX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | N/A\nMOV %RAX,%RDI                 | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | scal (25.0%)\nCALL 2170 <@plt_start@+0x150> | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOVQ $0,-0x80(%RBP)           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOVQ $0,-0xd0(%RBP)           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOV -0xf0(%RBP),%RAX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | N/A\nMOV (%RAX),%RCX               | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV 0x8(%RAX),%RBX            | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV %RCX,-0x80(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV %RBX,-0x78(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV 0x10(%RAX),%RCX           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV 0x18(%RAX),%RBX           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV %RCX,-0x70(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV %RBX,-0x68(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV 0x20(%RAX),%RCX           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV 0x28(%RAX),%RBX           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV %RCX,-0x60(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV %RBX,-0x58(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV 0x30(%RAX),%RCX           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV 0x38(%RAX),%RBX           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV %RCX,-0x50(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV %RBX,-0x48(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV 0x40(%RAX),%RAX           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | N/A\nMOV %RAX,-0x40(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV -0xf0(%RBP),%RAX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | N/A\nMOV -0xd0(%RBP),%RCX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV -0xc8(%RBP),%RBX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV %RCX,(%RAX)               | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV %RBX,0x8(%RAX)            | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV -0xc0(%RBP),%RCX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV -0xb8(%RBP),%RBX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV %RCX,0x10(%RAX)           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV %RBX,0x18(%RAX)           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV -0xb0(%RBP),%RCX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV -0xa8(%RBP),%RBX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV %RCX,0x20(%RAX)           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV %RBX,0x28(%RAX)           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV -0xa0(%RBP),%RCX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV -0x98(%RBP),%RBX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV %RCX,0x30(%RAX)           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV %RBX,0x38(%RAX)           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV -0x90(%RBP),%RDX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV %RDX,0x40(%RAX)           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV -0x80(%RBP),%RAX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | N/A\nTEST %RAX,%RAX                | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | scal (25.0%)\nJE 45b3 <crossover_+0x1f2>    | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nMOV -0x80(%RBP),%RAX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | N/A\nMOV %RAX,%RDI                 | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | scal (25.0%)\nCALL 2170 <@plt_start@+0x150> | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOVQ $0,-0x80(%RBP)           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nLEA -0x2c(%RBP),%RAX          | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | N/A\nMOV %RAX,%RDI                 | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | scal (25.0%)\nMOV $0,%EAX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | N/A\nCALL 2320 <@plt_start@+0x300> | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOV -0xd8(%RBP),%RAX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | N/A\nMOV 0x40(%RAX),%EAX           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | N/A\nPXOR %XMM1,%XMM1              | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | vect (50.0%)\nCVTSI2SS %EAX,%XMM1           | 2     | 0         | 0    | 1    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 1   | 4       | 1                 | scal (12.5%)\nMOVSS -0x2c(%RBP),%XMM0       | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | scal (12.5%)\nMULSS %XMM1,%XMM0             | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0.50 | 0.50 | 0   | 0   | 3       | 0.50              | scal (12.5%)\nCVTTSS2SI %XMM0,%EAX          | 2     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 1   | 1   | 4       | 1                 | scal (12.5%)\nMOV %EAX,-0x28(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOV -0x28(%RBP),%R14D         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (12.5%)\nMOVL $0x1,-0x24(%RBP)         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOV -0x24(%RBP),%R12D         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (12.5%)\nNOP                           | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | N/A\nMOV -0x28(%RBP),%EAX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | N/A\nLEA 0x1(%RAX),%EDX            | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | N/A\nMOV -0xd8(%RBP),%RAX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | N/A\nMOV 0x40(%RAX),%R14D          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (12.5%)\nMOV %EDX,-0x24(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOV -0x24(%RBP),%R12D         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (12.5%)\nNOP                           | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | N/A\nNOP                           | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | N/A\nADD $0xd0,%RSP                | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | N/A\nPOP %RBX                      | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nPOP %R12                      | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nPOP %R13                      | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nPOP %R14                      | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nPOP %RBP                      | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nRET                           | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\n"
              }
            ],
          "header":
            [
            "Warnings:\nDetected a function call instruction: ignoring called function instructions.\nRerun with --follow-calls=append to include them to analysis  or with --follow-calls=inline to simulate inlining.",
            "0% of peak computational performance is used (0.02 out of 48.00 FLOP per cycle (GFLOPS @ 1GHz))"
            ],
          "brief":
            [

            ],
          "gain":
            [
              {
                "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n - To reference allocatable arrays, use \"allocatable\" instead of \"pointer\" pointers or qualify them with the \"contiguous\" attribute (Fortran 2008)\n - For structures, limit to one indirection. For example, use a_b%c instead of a%b%c with a_b set to a%b before this function\n",
                "title": "Code clean check",
                "txt": "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 47.00 to 2.00 cycles (23.50x speedup)."
              },
              {
                "workaround": " - Try another compiler or update/tune your current one\n - Make array accesses unit-stride:\n  * If your function streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\ndo i a(i)%x = b(i)%x (slow, non stride 1) => do i a%x(i) = b%x(i) (fast, stride 1)\n",
                "details": "Store and arithmetical SSE/AVX instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized function can use their full power.\n",
                "title": "Vectorization",
                "txt": "Your function is probably not vectorized.\nOnly 23% of vector register length is used (average across all SSE/AVX instructions).\nBy vectorizing your function, you can lower the cost of an iteration from 47.00 to 7.44 cycles (6.32x speedup)."
              },
              {
                "title": "Execution units bottlenecks",
                "txt": "Found no such bottlenecks but see expert reports for more complex bottlenecks."
              }
            ],
          "potential":
            [

            ]
        },
      "paths":
        [
          {
            "hint":
              [
                {
                  "details": "Calling (and then returning from) a function prevents many compiler optimizations (like vectorization), breaks control flow (which reduces pipeline performance) and executes extra instructions to save/restore the registers used inside it, which is very expensive (dozens of cycles). Consider to inline small functions.\n - unknown: 4 occurrences<<list_path_1_call_1>>\n",
                  "title": "CALL instructions",
                  "txt": "Detected function call instructions.\n"
                },
                {
                  "workaround": "Recompile with march=znver2.\nCQA target is AMD_fam17h_mod60h (3rd generation Ryzen 3/5/7/9 processors based on the Zen 2 microarchitecture) but specialization flags are -march=x86-64",
                  "details": "These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.\n - CVTSI2SS: 1 occurrences<<list_path_1_complex_1>>\n - CVTTSS2SI: 1 occurrences<<list_path_1_complex_2>>\n",
                  "title": "Complex instructions",
                  "txt": "Detected COMPLEX INSTRUCTIONS.\n"
                },
                {
                  "workaround": "Avoid mixing data with different types. In particular, check if the type of constants is the same as array elements.",
                  "details": " - CVTSI2SS (INT32/64 to FP32, scalar): 1 occurrences<<list_path_1_cvt_1>>\n - CVTTSS2SI (FP32 to INT32/64, scalar): 1 occurrences<<list_path_1_cvt_2>>\n",
                  "title": "Conversion instructions",
                  "txt": "Detected expensive conversion instructions."
                },
                {
                  "title": "Type of elements and instruction set",
                  "txt": "1 SSE or AVX instructions are processing arithmetic or math operations on single precision FP elements in scalar mode (one at a time).\n"
                },
                {
                  "title": "Matching between your function (in the source code) and the binary function",
                  "txt": "The binary function is composed of 1 FP arithmetical operations:\n - 1: multiply\nThe binary function is loading 404 bytes (101 single precision FP elements).\nThe binary function is storing 364 bytes (91 single precision FP elements)."
                },
                {
                  "title": "Arithmetic intensity",
                  "txt": "Arithmetic intensity is 0.00 FP operations per loaded or stored byte."
                }
              ],
            "expert":
              [
                {
                  "title": "General properties",
                  "txt": "nb instructions    : 135\nnb uops            : 153\nloop length        : 607\nused x86 registers : 11\nused mmx registers : 0\nused xmm registers : 2\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 25\n"
                },
                {
                  "title": "Front-end",
                  "txt": "MACRO FUSION NOT POSSIBLE\nFIT IN UOP CACHE\nmicro-operation queue: 25.50 cycles\nfront end            : 25.50 cycles\n"
                },
                {
                  "title": "Back-end",
                  "txt": "       | ALU0/BRU0 | ALU1 | ALU2 | ALU3/BRU1 | AGU0  | AGU1  | AGU2  | FP0  | FP1  | FP2  | FP3\n------------------------------------------------------------------------------------------------\nuops   | 7.50      | 7.50 | 7.50 | 7.50      | 34.83 | 34.50 | 34.67 | 0.50 | 0.50 | 1.00 | 2.00\ncycles | 7.50      | 7.50 | 7.50 | 7.50      | 34.83 | 34.50 | 34.67 | 0.50 | 0.50 | 1.00 | 2.00\n\nExecution ports to units layout:\n - ALU0/BRU0: ALU, BRU\n - ALU1: ALU\n - ALU2: ALU\n - ALU3/BRU1: ALU, BRU\n - AGU0 (256 bits): store address, load\n - AGU1 (256 bits): store address, load\n - AGU2: store address\n - FP0 (256 bits): VPU\n - FP1 (256 bits): VPU\n - FP2 (256 bits): VPU, FP store data\n - FP3 (256 bits): VPU, DIV/SQRT\n\nCycles executing div or sqrt instructions: NA\nCycles loading/storing data              : 47.00\n"
                },
                {
                  "title": "Cycles summary",
                  "txt": "Front-end : 25.50\nDispatch  : 34.83\nOverall L1: 47.00\n"
                },
                {
                  "title": "Vectorization ratios",
                  "txt": "INT\nall    : 1%\nload   : 0%\nstore  : 0%\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 14%\nFP\nall     : 0%\nload    : 0%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : 0%\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 0%\nINT+FP\nall     : 1%\nload    : 0%\nstore   : 0%\nmul     : 0%\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 12%\n"
                },
                {
                  "title": "Vector efficiency ratios",
                  "txt": "INT\nall    : 23%\nload   : 23%\nstore  : 23%\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 26%\nFP\nall     : 12%\nload    : 12%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : 12%\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 12%\nINT+FP\nall     : 23%\nload    : 23%\nstore   : 23%\nmul     : 12%\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 25%\n"
                },
                {
                  "title": "Cycles and memory resources usage",
                  "txt": "Assuming all data fit into the L1 cache, each call to the function takes 47.00 cycles. At this rate:\n - 13% of peak load performance is reached (8.60 out of 64.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 24% of peak store performance is reached (7.74 out of 32.00 bytes stored per cycle (GB/s @ 1GHz))\n"
                },
                {
                  "title": "Front-end bottlenecks",
                  "txt": "Found no such bottlenecks."
                },
                {
                  "title": "ASM code",
                  "txt": "In the binary file, the address of the function is: 43c1\n\nInstruction                   | Nb FU | ALU0/BRU0 | ALU1 | ALU2 | ALU3/BRU1 | AGU0 | AGU1 | AGU2 | FP0  | FP1  | FP2 | FP3 | Latency | Recip. throughput | Vectorization\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nPUSH %RBP                     | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 1                 | N/A\nMOV %RSP,%RBP                 | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | N/A\nPUSH %R14                     | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 1                 | N/A\nPUSH %R13                     | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 1                 | N/A\nPUSH %R12                     | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 1                 | N/A\nPUSH %RBX                     | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 1                 | N/A\nSUB $0xd0,%RSP                | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | N/A\nCALLQ 0x11c17(%RIP)           | 2     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 1       | 1                 | N/A\nMOV %RDI,-0xd8(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV %RSI,-0xe0(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV %RDX,-0xe8(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV %RCX,-0xf0(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOVQ $0,-0xd0(%RBP)           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOV -0xe8(%RBP),%RAX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | N/A\nMOV (%RAX),%RCX               | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV 0x8(%RAX),%RBX            | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV %RCX,-0x80(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV %RBX,-0x78(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV 0x10(%RAX),%RCX           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV 0x18(%RAX),%RBX           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV %RCX,-0x70(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV %RBX,-0x68(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV 0x20(%RAX),%RCX           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV 0x28(%RAX),%RBX           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV %RCX,-0x60(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV %RBX,-0x58(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV 0x30(%RAX),%RCX           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV 0x38(%RAX),%RBX           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV %RCX,-0x50(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV %RBX,-0x48(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV 0x40(%RAX),%RAX           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | N/A\nMOV %RAX,-0x40(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV -0xe8(%RBP),%RAX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | N/A\nMOV -0xd0(%RBP),%RCX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV -0xc8(%RBP),%RBX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV %RCX,(%RAX)               | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV %RBX,0x8(%RAX)            | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV -0xc0(%RBP),%RCX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV -0xb8(%RBP),%RBX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV %RCX,0x10(%RAX)           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV %RBX,0x18(%RAX)           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV -0xb0(%RBP),%RCX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV -0xa8(%RBP),%RBX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV %RCX,0x20(%RAX)           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV %RBX,0x28(%RAX)           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV -0xa0(%RBP),%RCX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV -0x98(%RBP),%RBX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV %RCX,0x30(%RAX)           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV %RBX,0x38(%RAX)           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV -0x90(%RBP),%RDX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV %RDX,0x40(%RAX)           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV -0x80(%RBP),%RAX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | N/A\nTEST %RAX,%RAX                | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | scal (25.0%)\nJE 44d4 <crossover_+0x113>    | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nMOV -0x80(%RBP),%RAX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | N/A\nMOV %RAX,%RDI                 | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | scal (25.0%)\nCALL 2170 <@plt_start@+0x150> | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOVQ $0,-0x80(%RBP)           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOVQ $0,-0xd0(%RBP)           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOV -0xf0(%RBP),%RAX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | N/A\nMOV (%RAX),%RCX               | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV 0x8(%RAX),%RBX            | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV %RCX,-0x80(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV %RBX,-0x78(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV 0x10(%RAX),%RCX           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV 0x18(%RAX),%RBX           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV %RCX,-0x70(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV %RBX,-0x68(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV 0x20(%RAX),%RCX           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV 0x28(%RAX),%RBX           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV %RCX,-0x60(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV %RBX,-0x58(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV 0x30(%RAX),%RCX           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV 0x38(%RAX),%RBX           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV %RCX,-0x50(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV %RBX,-0x48(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV 0x40(%RAX),%RAX           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | N/A\nMOV %RAX,-0x40(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV -0xf0(%RBP),%RAX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | N/A\nMOV -0xd0(%RBP),%RCX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV -0xc8(%RBP),%RBX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV %RCX,(%RAX)               | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV %RBX,0x8(%RAX)            | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV -0xc0(%RBP),%RCX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV -0xb8(%RBP),%RBX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV %RCX,0x10(%RAX)           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV %RBX,0x18(%RAX)           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV -0xb0(%RBP),%RCX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV -0xa8(%RBP),%RBX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV %RCX,0x20(%RAX)           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV %RBX,0x28(%RAX)           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV -0xa0(%RBP),%RCX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV -0x98(%RBP),%RBX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV %RCX,0x30(%RAX)           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV %RBX,0x38(%RAX)           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV -0x90(%RBP),%RDX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (25.0%)\nMOV %RDX,0x40(%RAX)           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (25.0%)\nMOV -0x80(%RBP),%RAX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | N/A\nTEST %RAX,%RAX                | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | scal (25.0%)\nJE 45b3 <crossover_+0x1f2>    | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nMOV -0x80(%RBP),%RAX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | N/A\nMOV %RAX,%RDI                 | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | scal (25.0%)\nCALL 2170 <@plt_start@+0x150> | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOVQ $0,-0x80(%RBP)           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nLEA -0x2c(%RBP),%RAX          | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | N/A\nMOV %RAX,%RDI                 | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | scal (25.0%)\nMOV $0,%EAX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | N/A\nCALL 2320 <@plt_start@+0x300> | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 0       | 1                 | N/A\nMOV -0xd8(%RBP),%RAX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | N/A\nMOV 0x40(%RAX),%EAX           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | N/A\nPXOR %XMM1,%XMM1              | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0       | 0.25              | vect (50.0%)\nCVTSI2SS %EAX,%XMM1           | 2     | 0         | 0    | 1    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 1   | 4       | 1                 | scal (12.5%)\nMOVSS -0x2c(%RBP),%XMM0       | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | scal (12.5%)\nMULSS %XMM1,%XMM0             | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0.50 | 0.50 | 0   | 0   | 3       | 0.50              | scal (12.5%)\nCVTTSS2SI %XMM0,%EAX          | 2     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 1   | 1   | 4       | 1                 | scal (12.5%)\nMOV %EAX,-0x28(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOV -0x28(%RBP),%R14D         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (12.5%)\nMOVL $0x1,-0x24(%RBP)         | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOV -0x24(%RBP),%R12D         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (12.5%)\nNOP                           | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | N/A\nMOV -0x28(%RBP),%EAX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | N/A\nLEA 0x1(%RAX),%EDX            | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | N/A\nMOV -0xd8(%RBP),%RAX          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | N/A\nMOV 0x40(%RAX),%R14D          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (12.5%)\nMOV %EDX,-0x24(%RBP)          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 4       | 1                 | scal (12.5%)\nMOV -0x24(%RBP),%R12D         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0   | 0   | 3       | 0.50              | scal (12.5%)\nNOP                           | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | N/A\nNOP                           | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | N/A\nADD $0xd0,%RSP                | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.25              | N/A\nPOP %RBX                      | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nPOP %R12                      | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nPOP %R13                      | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nPOP %R14                      | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nPOP %RBP                      | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nRET                           | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\n"
                }
              ],
            "header":
              [
              "Warnings:\nDetected a function call instruction: ignoring called function instructions.\nRerun with --follow-calls=append to include them to analysis  or with --follow-calls=inline to simulate inlining.",
              "0% of peak computational performance is used (0.02 out of 48.00 FLOP per cycle (GFLOPS @ 1GHz))"
              ],
            "brief":
              [

              ],
            "gain":
              [
                {
                  "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n - To reference allocatable arrays, use \"allocatable\" instead of \"pointer\" pointers or qualify them with the \"contiguous\" attribute (Fortran 2008)\n - For structures, limit to one indirection. For example, use a_b%c instead of a%b%c with a_b set to a%b before this function\n",
                  "title": "Code clean check",
                  "txt": "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 47.00 to 2.00 cycles (23.50x speedup)."
                },
                {
                  "workaround": " - Try another compiler or update/tune your current one\n - Make array accesses unit-stride:\n  * If your function streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\ndo i a(i)%x = b(i)%x (slow, non stride 1) => do i a%x(i) = b%x(i) (fast, stride 1)\n",
                  "details": "Store and arithmetical SSE/AVX instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized function can use their full power.\n",
                  "title": "Vectorization",
                  "txt": "Your function is probably not vectorized.\nOnly 23% of vector register length is used (average across all SSE/AVX instructions).\nBy vectorizing your function, you can lower the cost of an iteration from 47.00 to 7.44 cycles (6.32x speedup)."
                },
                {
                  "title": "Execution units bottlenecks",
                  "txt": "Found no such bottlenecks but see expert reports for more complex bottlenecks."
                }
              ],
            "potential":
              [

              ]
          }
        ],
      "common":
        {
          "header":
            [
            "The function is defined in /home/notgard/chps1002/genetic_docking/part2/genetic_algorithm.f90:299,309-324.\n",
            "Warnings:\nIgnoring paths for analysis"
            ]
        }
    }
}
